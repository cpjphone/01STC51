FJC********************************************
1,
定时器计算器中断 0 
void system_Ini()
{
     TMOD = 0x00; //选择模式0  13位计数 最大计数8192
  
   // TH0=0x1C;   //12.000M  预装初值
    //TL0=0x18;	
	 TH0 = (8192 - 1000)/32;
	 TL0 = (8192 - 1000)%32	;
     IE = 0x8A;   //中断	
     TR0  = 1;    //开启T0定时器


}
 [ T0 (1ms)中断] 中断

*************************************/
void T0zd(void) interrupt 1      //3定时器1的中断号  1定时器0的中断号 0外部中断1 2外部中断2  4串口中断
{
	 //TH0 = 0xFc;    //12.000
	 //TL0 = 0x18;

	 TH0 = (8192 - 1000)/32	;
	 TL0 = (8192 - 1000)%32;

 	 LedNumVal++;
}



FJC*********************************************
2.
定时器计算器中断 1

void  main()
{
    TMOD=0x10;   //定时/计数器1工作于方式1
    TH0=0x4C;	 //定时器初始值
    TL0=0x00;    //50ms定时常数
    EA=1;        //开总中断
    ET1=1;       //允许定时/计数器1 中断
    TR1=1;       //启动定时/计数器1 中断
 
    while(1);
} 


/*********************************************************
  中断服务函数
**********************************************************/
void Time1(void) interrupt 3 // using 0
{
   TH1=0x4c;               //50ms定时
   TL1=0x00;
   if (++USE_C == 20)	  //每隔1秒发声
   { Beep = ~Beep;
	 USE_C = 0;
   }

   
}


FJC****************************************************
3，
定时器计数器中断 2
void main()             // 该中断计数循环3686（晶振11.0592MHZ）次是一秒4000次（12MHZ）
{
	TMOD=0x02;
	TH0=6;
	TL0=6;         //当低八位记满溢出 TF0标指位为 1 反应给	CPU 申请中断 同时TH0 中数组                       //自动装入（复制）TL0中
	EA=1;
	ETO=1;
	TR0=1;
	while(1)
	{

	}
void T0_time() interrupt 1 using 2
	{
	num++;
	}


	}     


FJC****************************************************
4，
定时器计数器中断 3 
void main()
{

	TMOD=0X03;
	THO=6;
	TLO=6;
	EA=1;
	ET0=1;
	ET1=1;
	TR0=1;
	TR1=1;
	while(1)
	{
		

	}
	
}
void TLO_time() interrupt 1     //低八位用定时器计数器中断0的中断源
{
	TL0=6;
	//num1++;
}
void TH0_time() interrupt 3    //高八位用定时器计数器中断1的中断源
{
	TH0=6;
	//num2++;
}
FJC****************************************************
5，定时器计数器中断 0 （计数器中断）
void Timer0() interrupt 1
{
   TH0 = 0Xa0;  //给计数器装初值
   TL0 = 0X00;
   
   LED = ~LED;	//LED灯取反



}

void main()
{
  P0 = 0XFF;				  
  TMOD = 0X05;	//选用计数模式和 选用模式1  0x05
  TH0 = 0Xa0;   //给计数器装初值
  TL0 = 0x00;
  EA = 1;	     //开发所有中断
  ET0 = 1;       //开启定时器T0中断
  TR0 = 1;	     //启动T0定时器
  
  while(1)  
  { 
    Pulse = 0 ;	 
  	_nop_();   //空指令函数 用于产生方波
    _nop_();
	_nop_();
	_nop_();
	Pulse = 1 ;
	_nop_();
    _nop_();
	_nop_();
	_nop_();

  
  }

FJC**********************************************
6，外部中断 INT0
********************************************************/
void main(void)
{  unsigned char i;

   P0=0xff;
   P1=0xff;
   P2=0xff;


// IT0=0;       //低电平触发
   IT0=1;       //下降沿触发
   EX0=1;


   
// IT1=0;       //低电平触发
   IT1=1;       //下降沿触发
   EX1=1;
   EA=1;


   while(1)
   {


   }；
}
/********************************************************
* INT0中断函数                                          *
********************************************************/
void  counter0(void) interrupt 0  using 1
{
  
   EX0=0;  
   //LedNumVal_1++;
   EX0=1;
}
/********************************************************
* INT1中断函数                                          *
********************************************************/
void  counter1(void) interrupt 2 using 2
{
   
   EX1=0;
   //LedNumVal_2++;
   EX1=1;
}
/********************************************************/


