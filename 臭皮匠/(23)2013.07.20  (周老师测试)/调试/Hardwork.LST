C51 COMPILER V9.01   HARDWORK                                                              07/20/2013 21:11:00 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE HARDWORK
OBJECT MODULE PLACED IN Hardwork.OBJ
COMPILER INVOKED BY: D:\(3)keil4\C51\BIN\C51.EXE Hardwork.c BROWSE INCDIR(.\IIC_Drive;.\24C02;.\ModuleDrive) DEBUG OBJEC
                    -TEXTEND

line level    source

   1          #include<reg51.h>
   2          #include<intrins.h>     
   3          #include <I2C.H>
   4          #include <18b20Drive.h>
   5          #include<Function.h>
   6          sfr WDT_CONTR=0xe1;  //WDT_CONTR寄存器 
   7          #define  PCF8591 0x90    //PCF8591 地址    10010000  高位固定地址1001   
   8          
   9          #define  AT24C02 0xa0  //AT24C02 地址   1010 0000       
  10                                                          //定义头文件
  11          
  12          #define uchar unsigned char                                             //宏定义
  13          #define uint unsigned int
  14          uchar disp_buffer[8];
  15          uchar count0,count1,num0,num1,num2,shu,shao,i,t,ad,D[32];
  16          sbit LED0 = P3^4;
  17          sbit LEDmark = P3^6; 
  18          sbit LEDog = P3^3;
  19          sbit LEDT = P3^5;
  20          char Timemark; 
  21          uchar code tab[] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x40,0x80,0x00};
  22          
  23          void delayms(uint ms)
  24          {
  25   1              uint i,j;  
  26   1              for(i=0;i<ms;i++)
  27   1                      for(j=0;j<121;j++);
  28   1      }
  29          
  30          /***************************************************************
  31          funtion:数码管显示函数
  32          ***************************************************************/
  33          void display()
  34          {
  35   1              uchar i,temp;
  36   1              temp = 0xfe;
  37   1              for(i=0;i<4;i++)
  38   1              {
  39   2                      P0 = temp;
  40   2                      P1 = tab[disp_buffer[i]];
  41   2                      delayms(3);
  42   2                      P1 = 0x00;
  43   2                      temp = _crol_(temp,1);                            //因为移位与放段同时，故i 是几，就送到哪位去。
  44   2              }
  45   1      }
  46          
  47          void display2()
  48          {
  49   1              uchar i,temp;
  50   1              temp=0xfe;
  51   1              for(i=4;i>0;i--)
  52   1              {
  53   2                      if(i==4)
  54   2                      {
C51 COMPILER V9.01   HARDWORK                                                              07/20/2013 21:11:00 PAGE 2   

  55   3                              P1=tab[disp_buffer[i-1]]|0x80;
  56   3                      }
  57   2                      else
  58   2                              P1=tab[disp_buffer[i-1]];
  59   2                      P0=temp;                        
  60   2                      delayms(2);
  61   2                      P0=0xff;
  62   2                      temp=(temp<<1)|0x01;            
  63   2              }       
  64   1      }
  65          
  66          void display3()
  67          {
  68   1              uchar i,temp;
  69   1              temp=0xfe;
  70   1              for(i=0;i<4;i++)
  71   1              {
  72   2                      if(i==1)
  73   2                      {
  74   3                              P1=tab[disp_buffer[i]]+0x80;
  75   3                      }
  76   2                      else
  77   2                              P1=tab[disp_buffer[i]];
  78   2                      P0=temp;                        
  79   2                      delayms(2);
  80   2                      P0=0xff;
  81   2                      temp=(temp<<1)|0x01;            
  82   2              }       
  83   1      }
  84          
  85          /*******************************************************************
  86          ADC发送字节[命令]数据函数               
  87          *******************************************************************/
  88          bit ISendByte(unsigned char sla,unsigned char c)
  89          {
  90   1         Start_I2c();              //启动总线
  91   1         SendByte(sla);            //发送器件地址
  92   1         if(ack==0)return(0);
  93   1         SendByte(c);              //发送数据
  94   1         if(ack==0)return(0);
  95   1         Stop_I2c();               //结束总线
  96   1         return(1);
  97   1      }
  98          
  99          /*******************************************************************
 100          ADC读字节数据函数               
 101          *******************************************************************/
 102          unsigned char IRcvByte(unsigned char sla)
 103          {  unsigned char c;
 104   1      
 105   1         Start_I2c();          //启动总线
 106   1         SendByte(sla+1);      //发送器件地址
 107   1         if(ack==0)return(0);
 108   1         c=RcvByte();          //读取数据0
 109   1      
 110   1         Ack_I2c(1);           //发送非就答位
 111   1         Stop_I2c();           //结束总线
 112   1         return(c);
 113   1      }
 114          
 115          //矩阵键盘.无按键动作时其返回值num_key=0,否则返回按键号num_key****检测高四位 
 116          uchar keyboard_matrix() 
C51 COMPILER V9.01   HARDWORK                                                              07/20/2013 21:11:00 PAGE 3   

 117          { 
 118   1              unsigned char num_key=30;//按键号 
 119   1              unsigned char temp=0;//读取P2口线数据 
 120   1              static unsigned char temp_code=0;//用于保存按键值 
 121   1              static unsigned char temp_circle=0xFE;//保存P2线上的循环扫描值 
 122   1              static unsigned char num_check=0;//低电平计数 
 123   1              static unsigned char key_flag=0;//按键有效标识 
 124   1      
 125   1              P2=temp_circle;//0xFX 
 126   1              temp=P2;//读取P2口线数据 
 127   1              if(temp!=temp_circle)//有按键动作 
 128   1              { 
 129   2                      num_check++;//低电平计数|逢低电平加1 
 130   2                      if(num_check==10)//连续10次(10ms)低电平有效 
 131   2                      { 
 132   3                              key_flag=1;//按键有效标识置1 
 133   3                              temp_code=temp;//保存按键值 
 134   3                                                      LED0 = 0;                               
 135   3                      } 
 136   2              } 
 137   1              else//松手OR无按键动作,此时应该改变扫描线 
 138   1              { 
 139   2                      num_check=0; 
 140   2                      if(key_flag==1)//按键有效判断 
 141   2                      { 
 142   3                              key_flag=0; 
 143   3                                                      LED0 = ~LED0;
 144   3                                                      Timemark++;
 145   3                                                      TR0  = 0;
 146   3                                              //      shu = 0x00;
 147   3                                                      shao = 0xff;
 148   3                                                      LEDmark = 1;
 149   3                                                      if(Timemark >= 5) {Timemark = 0; LEDmark=0;TR0  = 1;shao = 0xff;}
 150   3                              switch(temp_code)//读取按键号 
 151   3                              { 
 152   4                                      case 0xEE: num_key=0; 
 153   4                                                 break; 
 154   4                                      case 0xDE: num_key=10; 
 155   4                                                 break; 
 156   4                                      case 0xBE: num_key=11; 
 157   4                                                 break;  
 158   4                                      case 0xED: num_key=9; 
 159   4                                                 break; 
 160   4                                      case 0xDD: num_key=6; 
 161   4                                                 break; 
 162   4                                      case 0xBD: num_key=3; 
 163   4                                                 break; 
 164   4                                      case 0xEB: num_key=8; 
 165   4                                                 break; 
 166   4                                      case 0xDB: num_key=5; 
 167   4                                                 break; 
 168   4                                      case 0xBB: num_key=2; 
 169   4                                                 break; 
 170   4                                      case 0xE7: num_key=7; 
 171   4                                                 break; 
 172   4                                      case 0xD7: num_key=4; 
 173   4                                                 break; 
 174   4                                      case 0xB7: num_key=1; 
 175   4                                                 break;  
 176   4                              } 
 177   3                      } 
 178   2                      temp_circle=_crol_(temp_circle,1);//改变扫描线 
C51 COMPILER V9.01   HARDWORK                                                              07/20/2013 21:11:00 PAGE 4   

 179   2                      if(temp_circle==0xEF) 
 180   2                      { 
 181   3                              temp_circle=0xFE; 
 182   3                      } 
 183   2              } 
 184   1              return(num_key);//返回按键号 
 185   1      } 
 186          
 187          void main()
 188          {
 189   1              char num,tem;
 190   1              uchar pDat[2];
 191   1              bit flag1,flag2,flag3,flag4,flag5,flag6,flag7,flag8,flag9,flag10,flag11,Enter,ESC;
 192   1              EA   =1;
 193   1              ET0  =1;
 194   1              TMOD = 0x01;
 195   1              TH0  = (65536-50000)/256;//0x3c;
 196   1              TL0  = (65536-50000)%256;//0xb0;
 197   1              TR0  = 1;
 198   1              while(1)
 199   1              {
 200   2                              P0 = shao;                                      
 201   2                              P1 = shu;               
 202   2                              delayms(3);
 203   2                              P1 = 0x00;
 204   2                                      
 205   2                              num = keyboard_matrix();
 206   2                              if(Timemark == 1)
 207   2                              {       
 208   3                                      if(num == 1){flag1 = 1;flag2 = 0;}
 209   3                                      if(num == 2){flag2 = 1;flag1 = 0;}
 210   3                              }
 211   2                              if(Timemark == 2)
 212   2                              {
 213   3                                      if(num == 1){flag3 = 1;flag4 = 0;flag5 = 0;flag6 = 0;flag7 = 0;}
 214   3                                      if(num == 2){flag3 = 0;flag4 = 1;flag5 = 0;flag6 = 0;flag7 = 0;}
 215   3                                      if(num == 8){flag3 = 0;flag4 = 0;flag5 = 1;flag6 = 0;flag7 = 0;}
 216   3                                      if(num == 4){flag3 = 0;flag4 = 0;flag5 = 0;flag6 = 1;flag7 = 0;}
 217   3                                      if(num == 5){flag3 = 0;flag4 = 0;flag5 = 0;flag6 = 0;flag7 = 1;}
 218   3                              }
 219   2                              if(Timemark == 3)
 220   2                              {
 221   3                                      if(num == 0){flag8 = 1;flag9 = 0;t = 0; }
 222   3                                      if(num == 1){flag9 = 1;flag8 = 0;t = 1;}
 223   3                                      if(num == 2)t = 2;
 224   3                                      if(num == 3)t = 4;
 225   3                                      if(num == 4)t = 5;
 226   3                                      if(num == 5)t = 5;
 227   3                                      if(num == 6)t = 6;
 228   3                                      if(num == 7)t = 7;
 229   3                                      if(num == 8)t = 8;
 230   3                                      if(num == 9)t = 9;                                      
 231   3                              }
 232   2                              if(Timemark == 4)
 233   2                              {
 234   3                                      if(num == 0){flag10 = 1;flag11 = 0;}
 235   3                                      if(num == 1){flag11 = 1;flag10 = 0;}    
 236   3                              }
 237   2                              if(num == 10) {Enter = 1;ESC = 0;}
 238   2                              if(num == 11) {Enter = 0;ESC = 1;}
 239   2                                              if(flag1&flag3)
 240   2                                              {
C51 COMPILER V9.01   HARDWORK                                                              07/20/2013 21:11:00 PAGE 5   

 241   3                                                      if(Enter)       ad = 1;
 242   3                                                      if(ESC)         ad = 0;
 243   3                                                      if(flag8&flag11&(!ESC)) ad = 1;
 244   3                                                              if(ad == 1)
 245   3                                                              {
 246   4                                                                      ISendByte(PCF8591,0x40);
 247   4                                                                      D[0]=IRcvByte(PCF8591)*2;
 248   4                                                                      disp_buffer[0] = D[0]%10000/1000;
 249   4                                                                      disp_buffer[1] = D[0]%1000/100;
 250   4                                                      
 251   4                                                                      disp_buffer[2] = D[0]%100/10;
 252   4                                                                      disp_buffer[3] = D[0]%10;  
 253   4                                                                      display2();
 254   4                                                              }                       
 255   3                                              }
 256   2              
 257   2                                              if(flag1&flag5&(!ESC))
 258   2                                              {       
 259   3                                                      LEDT = 0;
 260   3      
 261   3                                                      tem = DS18B20_readtemperature();
 262   3                                                      disp_buffer[2]=tem%10;
 263   3                                                      disp_buffer[1]=tem%100/22;
 264   3                                                      disp_buffer[0]=tem/18;                                  
 265   3                                                              display3();                                                                                                             
 266   3                                              }
 267   2              
 268   2                                              if(flag2&flag6)
 269   2                                              {                                                                                       
 270   3                                                              pDat[0] = t; 
 271   3                                                              ISendStr(AT24C02, 0 , &pDat[0], 8); 
 272   3                                                              //ISendStr(AT24C02, 0x10 , &pDat[0], 8);                                                                                         //////////////////////////////////////////////
             -///////
 273   3                                              }                                       
 274   2              
 275   2                                              if(flag2&flag7&(!ESC))
 276   2                                              {
 277   3                                                      
 278   3                                                      IRcvStr(AT24C02, 0 , &pDat[0], 8); 
 279   3                                                      //IRcvStr(AT24C02, 0x10 , &pDat[0], 8); 
 280   3                                                      t=pDat[0];
 281   3                                                      disp_buffer[0] = t;     
 282   3                                                      disp_buffer[1] = 12;
 283   3                                                      disp_buffer[2] = 12;
 284   3                                                      disp_buffer[3] = 12;    
 285   3                                                      display();                                                                                      
 286   3                                              }
 287   2              
 288   2                                              if(flag1&flag4)
 289   2                                              {
 290   3                                                      WDT_CONTR=0x35;         //00110101  D4位CLR_WDT 为1时，看门狗将从新计数。硬件自动将                                     //此位清零；
 291   3                                                      LEDog = 0;
 292   3                                                      delayms(500);
 293   3                                                      LEDog = 1;
 294   3                                                      delayms(500);
 295   3                                                      LEDog = 0;
 296   3                                                      delayms(500);
 297   3                                                      LEDog = 1;
 298   3                                                      delayms(500);
 299   3                                                      LEDog = 0;
 300   3                                                      delayms(10000);
 301   3                                                      WDT_CONTR=0x35;                                                                                                                                                                                                                                                                                         
C51 COMPILER V9.01   HARDWORK                                                              07/20/2013 21:11:00 PAGE 6   

 302   3                                              }       
 303   2              }
 304   1      
 305   1      }
 306          
 307          void timer0() interrupt 1
 308          {
 309   1              TH0 = (65536-50000)/256;//0x3c;
 310   1              TL0 = (65536-50000)%256;//0xb0;
 311   1              count0++;
 312   1              if(count0 > 9)
 313   1              {
 314   2                      count0 = 0;
 315   2                      if(i>3)i=0;              
 316   2                      shu = tab[4-i];
 317   2                      num1 = 0xfe;
 318   2                      num1 = _crol_(num1,i);
 319   2                      shao = num1;
 320   2                      i++;
 321   2                      
 322   2              }       
 323   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1102    ----
   CONSTANT SIZE    =     13    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     55      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----      13
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
