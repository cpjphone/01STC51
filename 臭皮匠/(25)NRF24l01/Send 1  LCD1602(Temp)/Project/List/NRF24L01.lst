C51 COMPILER V9.01   NRF24L01                                                              07/27/2013 11:51:50 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE NRF24L01
OBJECT MODULE PLACED IN .\Obj\NRF24L01.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\UserDriver\NRF24L01\NRF24L01.c BROWSE INCDIR(..\Include;..\Main;..\UserD
                    -river\NRF24L01;..\UserDriver\Delay;..\UserDriver\Display;..\UserDriver\DS18B20;..\UserDriver\LCD1602) DEBUG OBJECTEXTEND
                    - PRINT(.\List\NRF24L01.lst) OBJECT(.\Obj\NRF24L01.obj)

line level    source

   1          /*****************************************************************************
   2          函数名称：      NRF24L01.c
   3          描述    ：      NRF24L01程序
   4          输入    ：      无
   5          输出    ：      无
   6          返回    ：      无
   7          注意事项：      无
   8          ****************NRF24L01引脚图************************************************
   9          *                       IRQ     /8              7/MISO
  10          *                       MOSI/6          5/SCK
  11          *                       CSN     /4              3/CE
  12          *                       VCC     /2              1/GND   
  13          ******************************************************************************/
  14          #include "NRF24L01.h"
  15                  
  16          uchar const TX_ADDRESS[TX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};//本地地址
  17          uchar const RX_ADDRESS[RX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};//接收地址
  18          
  19          uchar bdata sta;   //状态标志
  20          sbit    RX_DR  = sta^6;
  21          sbit    TX_DS  = sta^5;
  22          sbit    MAX_RT = sta^4;
  23          
  24          
  25          /********************************************************************************************
  26          函数名称：      uint SPI_RW(uint uchar)
  27          描述    ：      NRF24L01的SPI写时序
  28          输入    ：      无
  29          输出    ：      无
  30          返回    ：      无
  31          注意事项：      无
  32          *********************************************************************************************/
  33          uchar SPI_WR(unsigned char Dat)
  34          {
  35   1              unsigned char bit_ctr;
  36   1              for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
  37   1              {
  38   2                      MOSI = (Dat & 0x80);         // output 'uchar', MSB to MOSI
  39   2                      Dat = (Dat << 1);           // shift next bit into MSB..
  40   2                      SCK = 1;                      // Set SCK high..
  41   2                      Dat |= MISO;                      // capture current MISO bit
  42   2                      SCK = 0;                          // ..then set SCK low again
  43   2              }
  44   1          return(Dat);                          // return read uchar
  45   1      }
  46          
  47          /********************************************************************************************
  48          函数名称：      uchar SPI_Read(uchar reg)
  49          描述    ：      NRF24L01的SPI读时序
  50          输入    ：      无
  51          输出    ：      无
  52          返回    ：      无
  53          注意事项：      无
C51 COMPILER V9.01   NRF24L01                                                              07/27/2013 11:51:50 PAGE 2   

  54          *********************************************************************************************/
  55          //uchar SPI_Read(uchar reg)
  56          //{
  57          //      uchar reg_val;
  58          //      
  59          //      CSN = 0;                // CSN low, initialize SPI communication...
  60          //      SPI_WR(reg);            // Select register to read from..
  61          //      reg_val = SPI_WR(0);    // ..then read registervalue
  62          //      CSN = 1;                // CSN high, terminate SPI communication
  63          //      
  64          //      return(reg_val);        // return register value
  65          //}
  66          
  67          /********************************************************************************************
  68          函数名称：      uint SPI_RW_Reg(uchar reg, uchar value)
  69          描述    ：      NRF24L01读写寄存器函数
  70          输入    ：      无
  71          输出    ：      无
  72          返回    ：      无
  73          注意事项：      无
  74          *********************************************************************************************/
  75          uchar SPI_RW_Reg(uchar reg, uchar value)
  76          {
  77   1              uchar status;
  78   1              
  79   1              CSN = 0;                   // CSN low, init SPI transaction
  80   1              status = SPI_WR(reg);      // select register
  81   1              SPI_WR(value);             // ..and write value to it..
  82   1              CSN = 1;                   // CSN high again
  83   1              
  84   1              return(status);            // return nRF24L01 status uchar
  85   1      }
  86          
  87          /********************************************************************************************
  88          函数名称：      uint SPI_Read_Data(uchar reg, uchar *pBuf, uchar uchars)
  89          描述    ：      NRF24L01 读数据
  90          输入    ：      无
  91          输出    ：      无
  92          返回    ：      无
  93          注意事项：      reg：为寄存器地址，pBuf：为待读出数据地址，uchars：读出数据的个数
  94          *********************************************************************************************/
  95          //uchar SPI_Read_Data(uchar reg, uchar *pBuf, uchar uchars)
  96          //{
  97          //      uchar status,uchar_ctr;
  98          //      
  99          //      CSN = 0;         // Set CSN low, init SPI tranaction
 100          //      status = SPI_WR(reg);           // Select register to write to and read status uchar    
 101          //      for(uchar_ctr=0;uchar_ctr<uchars;uchar_ctr++)
 102          //      {
 103          //              pBuf[uchar_ctr] = SPI_WR(0);   // 
 104          //      }       
 105          //      CSN = 1;                           
 106          //      
 107          //      return(status);           // return nRF24L01 status uchar
 108          //}
 109          
 110          /********************************************************************************************
 111          函数名称：      uint SPI_Write_Data(uchar reg, uchar *pBuf, uchar uchars)
 112          描述    ：      NRF24L01 写数据
 113          输入    ：      无
 114          输出    ：      无
 115          返回    ：      无
C51 COMPILER V9.01   NRF24L01                                                              07/27/2013 11:51:50 PAGE 3   

 116          注意事项：      reg为寄存器地址，pBuf：为待写入数据地址，uchars：写入数据的个数
 117          *********************************************************************************************/
 118          uchar SPI_Write_Data(uchar reg, uchar *pBuf, uchar uchars)
 119          {
 120   1              uchar status,uchar_ctr;
 121   1              
 122   1              CSN = 0;            //SPI使能       
 123   1              status = SPI_WR(reg);   
 124   1              for(uchar_ctr=0; uchar_ctr<uchars; uchar_ctr++) //
 125   1              {
 126   2                      SPI_WR(*pBuf++);
 127   2              }
 128   1              CSN = 1;           //关闭SPI
 129   1              return(status);    // 
 130   1      }
 131          
 132          /********************************************************************************************
 133          函数名称：      void SetRX_Mode(void)
 134          描述    ：      NRF24L01 数据接收配置 
 135          输入    ：      无
 136          输出    ：      无
 137          返回    ：      无
 138          注意事项：      无
 139          *********************************************************************************************/
 140          //void SetRX_Mode(void)
 141          //{
 142          //      CE=0;
 143          //      SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);   // IRQ收发完成中断响应，16位CRC ，主接收
 144          //      CE = 1; 
 145          //      inerDelay_us(130);
 146          //}
 147          
 148          /********************************************************************************************
 149          函数名称：      uchar nRF24L01_RxPacket(unsigned char* rx_buf)
 150          描述    ：      数据读取后放如rx_buf接收缓冲区中
 151          输入    ：      无
 152          输出    ：      无
 153          返回    ：      无
 154          注意事项：      无
 155          *********************************************************************************************/
 156          //uchar nRF24L01_RxPacket(unsigned char* rx_buf)
 157          //{
 158          //    unsigned char revale=0;
 159          //      sta=SPI_Read(STATUS);   // 读取状态寄存其来判断数据接收状况
 160          //      if(RX_DR)                               // 判断是否接收到数据
 161          //      {
 162          //          CE = 0;                     //SPI使能
 163          //              SPI_Read_Data(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// read receive payload from RX_FIFO buffer
 164          //              revale =1;                      //读取数据完成标志
 165          //      }
 166          //      SPI_RW_Reg(WRITE_REG+STATUS,sta);   //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清楚中断标志
 167          //      return revale;
 168          //}
 169          
 170          /********************************************************************************************
 171          函数名称：      void nRF24L01_TxPacket(uchar *tx_buf)
 172          描述    ：      发送 tx_buf中数据
 173          输入    ：      无
 174          输出    ：      无
 175          返回    ：      无
 176          注意事项：      无
 177          *********************************************************************************************/
C51 COMPILER V9.01   NRF24L01                                                              07/27/2013 11:51:50 PAGE 4   

 178          void nRF24L01_TxPacket(unsigned char * tx_buf)
 179          {
 180   1              CE=0;                   //StandBy I模式 
 181   1      //      SPI_Write_Data(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 装载接收端地址
 182   1              SPI_Write_Data(WRITE_REG + RX_ADDR_P1, TX_ADDRESS, TX_ADR_WIDTH); // 装载接收端地址
 183   1              SPI_Write_Data(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH);                     // 装载数据    
 184   1      //      SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);                    // IRQ收发完成中断响应，16位CRC，主发送
 185   1              CE=1;            //置高CE，激发数据发送
 186   1              inerDelay_us(10);
 187   1      }
 188          
 189          /********************************************************************************************
 190          函数名称：      void InitNRF24L01(void)
 191          描述    ：      NRF24L01初始化
 192          输入    ：      无
 193          输出    ：      无
 194          返回    ：      无
 195          注意事项：      无
 196          *********************************************************************************************/
 197          void Init_NRF24L01(void)
 198          {
 199   1              inerDelay_us(100);
 200   1              CE=0;    // chip enable
 201   1              CSN=1;   // Spi disable 
 202   1              SCK=0;   // Spi clock line init high
 203   1              SPI_Write_Data(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH); //写本地地址     
 204   1              SPI_Write_Data(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH); //写接收端地址
 205   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      //频道0自动   ACK应答允许     
 206   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  //允许接收地址只有频道0，如果需要多频道可以参考Page21  
 207   1              SPI_RW_Reg(WRITE_REG + RF_CH, 0);        //设置信道工作为2.4GHZ，收发必须一致
 208   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH); //设置接收数据长度，本次设置为32字节
 209   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);                 //设置发射速率为1MHZ，发射功率为最大值0dB       
 210   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);                    //IRQ收发完成中断响应，16位CRC，主发送
 211   1      }
 212          
 213          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    213    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
