C51 COMPILER V8.08   REVEIVE                                                               07/19/2013 19:29:55 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE REVEIVE
OBJECT MODULE PLACED IN Reveive.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Reveive.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /******************************************************************************      
   2          * 【名    称】： NRF24L01接收程序
   3          * 【语    言】： C语言
   4          * 【编译环境】： Keil 3 
   5          * 【晶    振】:  12MHz外部晶振          
   6          * 【芯    片】:  STC89C5XX
   7          * 【程序功能】： 
   8          * 【日    期】:  2013-07-18
   9          * 【作    者】:  Mike
  10          ****************NRF24L01引脚图******************
  11          *                       IRQ     /8              7/MISO
  12          *                       MOSI/6          5/SCK
  13          *                       CSN     /4              3/CE
  14          *                       VCC     /2              1/GND   
  15          ******************************************************************************/    
  16          #include<reg52.h>                                                       //头文件定义                                                     
  17          #include<intrins.h>                                                 //头文件定义
  18          
  19          //#define uchar unsigned char                           //宏定义
  20          //#define uint unsigned int                                     //宏定义
  21          
  22          typedef unsigned char uchar;
  23          typedef unsigned int uint;
  24          
  25          /**************************NRF24L01******************************************/
  26          #define TX_ADR_WIDTH    5       // 5 uints TX address width
  27          #define RX_ADR_WIDTH    5       // 5 uints RX address width
  28          #define TX_PLOAD_WIDTH  5       // 
  29          #define RX_PLOAD_WIDTH  5       // 
  30          uchar const TX_ADDRESS[TX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};       //本地地址
  31          uchar const RX_ADDRESS[RX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};       //接收地址
  32          
  33          /**************************NRF24L01寄存器指令*********************************/
  34          #define READ_REG        0x00    // 读寄存器指令
  35          #define WRITE_REG       0x20    // 写寄存器指令
  36          #define RD_RX_PLOAD     0x61    // 读取接收数据指令
  37          #define WR_TX_PLOAD     0xA0    // 写待发数据指令
  38          #define FLUSH_TX        0xE1    // 冲洗发送 FIFO指令
  39          #define FLUSH_RX        0xE2    // 冲洗接收 FIFO指令
  40          #define REUSE_TX_PL     0xE3    // 定义重复装载数据指令
  41          #define NOP             0xFF    // 保留
  42          
  43          /***************************SPI(nRF24L01)寄存器地址***************************/
  44          #define CONFIG          0x00  // 配置收发状态，CRC校验模式以及收发状态响应方式
  45          #define EN_AA           0x01  // 自动应答功能设置
  46          #define EN_RXADDR       0x02  // 可用信道设置
  47          #define SETUP_AW        0x03  // 收发地址宽度设置
  48          #define SETUP_RETR      0x04  // 自动重发功能设置
  49          #define RF_CH           0x05  // 工作频率设置
  50          #define RF_SETUP        0x06  // 发射速率、功耗功能设置
  51          #define STATUS          0x07  // 状态寄存器
  52          #define OBSERVE_TX      0x08  // 发送监测功能
  53          #define CD              0x09  // 地址检测           
  54          #define RX_ADDR_P0      0x0A  // 频道0接收数据地址
  55          #define RX_ADDR_P1      0x0B  // 频道1接收数据地址
C51 COMPILER V8.08   REVEIVE                                                               07/19/2013 19:29:55 PAGE 2   

  56          #define RX_ADDR_P2      0x0C  // 频道2接收数据地址
  57          #define RX_ADDR_P3      0x0D  // 频道3接收数据地址
  58          #define RX_ADDR_P4      0x0E  // 频道4接收数据地址
  59          #define RX_ADDR_P5      0x0F  // 频道5接收数据地址
  60          #define TX_ADDR         0x10  // 发送地址寄存器
  61          #define RX_PW_P0        0x11  // 接收频道0接收数据长度
  62          #define RX_PW_P1        0x12  // 接收频道0接收数据长度
  63          #define RX_PW_P2        0x13  // 接收频道0接收数据长度
  64          #define RX_PW_P3        0x14  // 接收频道0接收数据长度
  65          #define RX_PW_P4        0x15  // 接收频道0接收数据长度
  66          #define RX_PW_P5        0x16  // 接收频道0接收数据长度
  67          #define FIFO_STATUS     0x17  // FIFO栈入栈出状态寄存器设置
  68          
  69          /**********************NRF24L01IO端口定义(1脚GND，2脚VCC)********************/
  70          sbit    CE          =P0^0;        //3
  71          sbit    CSN             =P0^3;    //4
  72          sbit    SCK         =P0^1;        //5
  73          sbit    MOSI    =P0^4;    //6
  74          sbit    MISO    =P0^2;    //7
  75          sbit    IRQ             =P0^5;    //8
  76          
  77          sbit led   = P1^0; //led接收指示灯
  78          
  79          sbit beep = P3^7;
  80          
  81          uchar i,count;
  82          uchar RxBuf[5];
  83          
  84          /****************************************************************************/
  85          uchar   bdata sta;   //状态标志
  86          sbit    RX_DR   =sta^6;
  87          sbit    TX_DS   =sta^5;
  88          sbit    MAX_RT  =sta^4;
  89          
  90          
  91          /******************************************************************************
  92          函数名称：      void Delay(uint m)
  93          描述    ：      长延时
  94          输入    ：      无
  95          输出    ：      无
  96          返回    ：      无
  97          注意事项：      无
  98          *******************************************************************************/
  99          void Delay(unsigned int m)
 100          {
 101   1              unsigned int i;
 102   1              for(i=0; i<m; i++);
 103   1                      for(i=0; i<m; i++);
 104   1      }
 105          
 106          /*****************************************************************************
 107          函数名称：      void inerDelay_us(uchar m)
 108          描述    ：
 109          输入    ：      无
 110          输出    ：      无
 111          返回    ：      无
 112          注意事项：      无
 113          ******************************************************************************/
 114          void inerDelay_us(uchar m)
 115          {
 116   1              for(;m>0;m--)
 117   1                      _nop_();
C51 COMPILER V8.08   REVEIVE                                                               07/19/2013 19:29:55 PAGE 3   

 118   1      }
 119          
 120          /*****************************************************************************
 121          函数名称：      void DelayBeep(uchar m)
 122          描述    ：
 123          输入    ：      无
 124          输出    ：      无
 125          返回    ：      无
 126          注意事项：      无
 127          ******************************************************************************/
 128          //void DelayBeep(uchar m)       
 129          //{
 130          //      uchar i,j;
 131          //      for(i=m;i>0;i--)
 132          //              for(j=110;j>0;j--);
 133          //}
 134          
 135          /********************************************************************************************
 136          函数名称：      void Beep() 
 137          描述    ：      蜂鸣器
 138          输入    ：      无
 139          输出    ：      无
 140          返回    ：      无
 141          注意事项：      无
 142          *********************************************************************************************/
 143          //void Beep()  
 144          //{
 145          //      uchar i;
 146          //      for (i=0;i<50;i++)
 147          //      {
 148          //              DelayBeep(5);
 149          //              beep=!beep;       //BEEP取反
 150          //      } 
 151          //      beep = 1;           //关闭蜂鸣器
 152          //      DelayBeep(200);       //延时     
 153          //}
 154          
 155          
 156          /********************************************************************************************
 157          函数名称：      uint SPI_RW(uint uchar)
 158          描述    ：      NRF24L01的SPI写时序
 159          输入    ：      无
 160          输出    ：      无
 161          返回    ：      无
 162          注意事项：      无
 163          *********************************************************************************************/
 164          uchar SPI_WR(unsigned char Dat)
 165          {
 166   1              unsigned char bit_ctr;
 167   1              for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
 168   1              {
 169   2                      MOSI = (Dat & 0x80);         // output 'uchar', MSB to MOSI
 170   2                      Dat = (Dat << 1);           // shift next bit into MSB..
 171   2                      SCK = 1;                      // Set SCK high..
 172   2                      Dat |= MISO;                      // capture current MISO bit
 173   2                      SCK = 0;                          // ..then set SCK low again
 174   2              }
 175   1          return(Dat);                          // return read uchar
 176   1      }
 177          
 178          /********************************************************************************************
 179          函数名称：      uchar SPI_Read(uchar reg)
C51 COMPILER V8.08   REVEIVE                                                               07/19/2013 19:29:55 PAGE 4   

 180          描述    ：      NRF24L01的SPI读时序
 181          输入    ：      无
 182          输出    ：      无
 183          返回    ：      无
 184          注意事项：      无
 185          *********************************************************************************************/
 186          uchar SPI_Read(uchar reg)
 187          {
 188   1              uchar reg_val;
 189   1              
 190   1              CSN = 0;                // CSN low, initialize SPI communication...
 191   1              SPI_WR(reg);            // Select register to read from..
 192   1              reg_val = SPI_WR(0);    // ..then read registervalue
 193   1              CSN = 1;                // CSN high, terminate SPI communication
 194   1              
 195   1              return(reg_val);        // return register value
 196   1      }
 197          
 198          /********************************************************************************************
 199          函数名称：      uint SPI_RW_Reg(uchar reg, uchar value)
 200          描述    ：      NRF24L01读写寄存器函数
 201          输入    ：      无
 202          输出    ：      无
 203          返回    ：      无
 204          注意事项：      无
 205          *********************************************************************************************/
 206          uchar SPI_RW_Reg(uchar reg, uchar value)
 207          {
 208   1              uchar status;
 209   1              
 210   1              CSN = 0;                   // CSN low, init SPI transaction
 211   1              status = SPI_WR(reg);      // select register
 212   1              SPI_WR(value);             // ..and write value to it..
 213   1              CSN = 1;                   // CSN high again
 214   1              
 215   1              return(status);            // return nRF24L01 status uchar
 216   1      }
 217          
 218          /********************************************************************************************
 219          函数名称：      uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 220          描述    ：      NRF24L01 读数据
 221          输入    ：      无
 222          输出    ：      无
 223          返回    ：      无
 224          注意事项：      reg：为寄存器地址，pBuf：为待读出数据地址，uchars：读出数据的个数
 225          *********************************************************************************************/
 226          uchar SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 227          {
 228   1              uchar status,uchar_ctr;
 229   1              
 230   1              CSN = 0;                                // Set CSN low, init SPI tranaction
 231   1              status = SPI_WR(reg);                   // Select register to write to and read status uchar
 232   1              
 233   1              for(uchar_ctr=0;uchar_ctr<uchars;uchar_ctr++)
 234   1                      pBuf[uchar_ctr] = SPI_WR(0);    // 
 235   1              
 236   1              CSN = 1;                           
 237   1              
 238   1              return(status);                    // return nRF24L01 status uchar
 239   1      }
 240          
 241          /********************************************************************************************
C51 COMPILER V8.08   REVEIVE                                                               07/19/2013 19:29:55 PAGE 5   

 242          函数名称：      uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 243          描述    ：      NRF24L01 写数据
 244          输入    ：      无
 245          输出    ：      无
 246          返回    ：      无
 247          注意事项：      为寄存器地址，pBuf：为待写入数据地址，uchars：写入数据的个数
 248          *********************************************************************************************/
 249          uchar SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 250          {
 251   1              uchar status,uchar_ctr;
 252   1              
 253   1              CSN = 0;            //SPI使能       
 254   1              status = SPI_WR(reg);   
 255   1              for(uchar_ctr=0; uchar_ctr<uchars; uchar_ctr++) //
 256   1                      SPI_WR(*pBuf++);
 257   1              CSN = 1;           //关闭SPI
 258   1              return(status);    // 
 259   1      }
 260          
 261          /********************************************************************************************
 262          函数名称：      void SetRX_Mode(void)
 263          描述    ：      NRF24L01 数据接收配置 
 264          输入    ：      无
 265          输出    ：      无
 266          返回    ：      无
 267          注意事项：      无
 268          *********************************************************************************************/
 269          void SetRX_Mode(void)
 270          {
 271   1              CE=0;
 272   1      //      SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);                   // IRQ收发完成中断响应，16位CRC ，主接收
 273   1              CE = 1; 
 274   1              inerDelay_us(130);
 275   1      }
 276          
 277          /********************************************************************************************
 278          函数名称：      uchar nRF24L01_RxPacket(unsigned char* rx_buf)
 279          描述    ：      数据读取后放如rx_buf接收缓冲区中
 280          输入    ：      无
 281          输出    ：      无
 282          返回    ：      无
 283          注意事项：      无
 284          *********************************************************************************************/
 285          unsigned char nRF24L01_RxPacket(unsigned char * rx_buf)
 286          {
 287   1          unsigned char revale=0;
 288   1              sta=SPI_Read(STATUS);   // 读取状态寄存其来判断数据接收状况
 289   1              if(RX_DR)                               // 判断是否接收到数据
 290   1              {
 291   2                  CE = 0;                     //SPI使能
 292   2                      SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// read receive payload from RX_FIFO buffer
 293   2                      revale =1;                      //读取数据完成标志
 294   2              }
 295   1              SPI_RW_Reg(WRITE_REG+STATUS,sta);   //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清楚中断标志
 296   1              return revale;
 297   1      }
 298          
 299          /********************************************************************************************
 300          函数名称：      void Ini_NRF24L01(void)
 301          描述    ：      NRF24L01初始化
 302          输入    ：      无
 303          输出    ：      无
C51 COMPILER V8.08   REVEIVE                                                               07/19/2013 19:29:55 PAGE 6   

 304          返回    ：      无
 305          注意事项：      无
 306          *********************************************************************************************/
 307          void Init_NRF24L01(void)
 308          {
 309   1          inerDelay_us(100);
 310   1              CE=0;    // chip enable
 311   1              CSN=1;   // Spi disable 
 312   1              SCK=0;   // Spi clock line init high
 313   1              SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // 写本地地址  
 314   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH); // 写接收端地址
 315   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      //  频道0自动 ACK应答允许     
 316   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  //  允许接收地址只有频道0，如果需要多频道可以参考Page21  
 317   1              SPI_RW_Reg(WRITE_REG + RF_CH, 0);        //   设置信道工作为2.4GHZ，收发必须一致
 318   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH); //设置接收数据长度，本次设置为32字节
 319   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);                 //设置发射速率为1MHZ，发射功率为最大值0dB
 320   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);                   // IRQ收发完成中断响应，16位CRC ，主接收
 321   1      }
 322          
 323          /********************************************************************
 324          函数名：void main(void)
 325          功  能：主程序 
 326          *********************************************************************/      
 327          void main(void)
 328          {
 329   1              Init_NRF24L01() ;
 330   1      
 331   1              Delay(6000);
 332   1              
 333   1              while(1)
 334   1              {       
 335   2                      SetRX_Mode();
 336   2                      if(nRF24L01_RxPacket(RxBuf))
 337   2                      {       
 338   3                              led=!led;                          
 339   3                              Delay(5000);                            
 340   3                      }
 341   2                      else 
 342   2                              led = 1;
 343   2                              //Beep();                               
 344   2              }                                                       
 345   1      }
 346          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    372    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     18      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
