C51 COMPILER V9.01   MAIN                                                                  08/07/2013 18:04:59 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include"main.h"
   2          
   3          #define SPEED_SET 1200
   4          #define SPEED_MAX 255
   5          
   6          typedef struct PIDValue
   7          {
   8              uint    Ek[3];         //差值保存，给定和反馈的差值
   9              uchar   EkFlag[3];     //符号，1则对应的Ek[i]为负数，0为对应的Ek[i]为正数
  10              uchar   KP;
  11              uchar   KI;
  12                  uchar   KD;
  13                  uchar   B;                       //死区   
  14                  uint    Uk;    //上一时刻的控制 转速
  15          
  16                  uchar   Uk_flag;
  17          }PIDValueStr;
  18           
  19          PIDValueStr xdata PID;
  20          
  21          sbit  DC_MOTO1= P1^3;
  22          sbit  DC_MOTO2= P1^4;
  23          sbit  test0    = P1^0;
  24          uint  speed ,speed_aver;
  25          uchar count,sec,pwm = 200,flag;
  26          
  27          void init_watch_dog()                                                           //  看门狗设置；
  28          {
  29   1         WDT_CONTR = 1<< WDT_EN | 0x06;
  30   1      }
  31          
  32          void Clr_watch_dog()                                                              // 喂狗程序；
  33          {
  34   1         WDT_CONTR |= 1<<WDT_CLR;
  35   1      }
  36          
  37          void LCDLogo()
  38          {
  39   1         
  40   1          write_com(0x80);
  41   1              lcm_w_word("12c60s2 PWM test");
  42   1              //标尺     “1234567890abcdef"
  43   1              write_com(0x90);
  44   1          lcm_w_word("   2013-7-29");  
  45   1              write_com(0x88);
  46   1              lcm_w_word("转速:"); 
  47   1      }
  48          
  49          /*******************************
  50          **PID = Uk + (KP*E(k) - KI*E(k-1) + KD*E(k-2));
  51          ********************************/
  52          uint  PIDProcess(void)
  53          {
  54   1       uint idata Temp[3];  //
  55   1       uint idata PostSum;  //正数和
C51 COMPILER V9.01   MAIN                                                                  08/07/2013 18:04:59 PAGE 2   

  56   1       uint idata NegSum;   //负数和
  57   1       Temp[0] = 0;
  58   1       Temp[1] = 0;
  59   1       Temp[2] = 0;
  60   1       PostSum = 0;
  61   1       NegSum  = 0;// 
  62   1       if(speed_aver > SPEED_SET)//  //给定大于反馈,则EK为正数
  63   1       {       
  64   2           Temp[0] = speed_aver - SPEED_SET;   //计算Ek[0]
  65   2              if( Temp[0] > PID.B )//死区电压比较
  66   2              {
  67   3            //数值移位
  68   3                  PID.Ek[2] = PID.Ek[1];
  69   3                  PID.Ek[1] = PID.Ek[0];
  70   3                  PID.Ek[0] = Temp[0];
  71   3                  //符号移位
  72   3                              PID.EkFlag[2] = PID.EkFlag[1];
  73   3                              PID.EkFlag[1] = PID.EkFlag[0];
  74   3                              PID.EkFlag[0] = 0;                       
  75   3                              //当前EK为正数
  76   3                              
  77   3                  Temp[0] = PID.KP * PID.Ek[0];    // KP*EK0
  78   3                  Temp[1] = PID.KI * PID.Ek[1];    // KI*EK1
  79   3                  Temp[2] = PID.KD * PID.Ek[2];    // KD*EK2
  80   3              }
  81   2       }
  82   1       else   //反馈大于给定
  83   1       {
  84   2           Temp[0] = SPEED_SET  - speed_aver  ;   //计算Ek[0]
  85   2              if( Temp[0] > PID.B )
  86   2              {
  87   3                              //数值移位
  88   3                  PID.Ek[2] = PID.Ek[1];
  89   3                  PID.Ek[1] = PID.Ek[0];
  90   3                  PID.Ek[0] = Temp[0];
  91   3                              //符号移位
  92   3                              PID.EkFlag[2] = PID.EkFlag[1];
  93   3                              PID.EkFlag[1] = PID.EkFlag[0];
  94   3                              PID.EkFlag[0] = 1;    
  95   3                              //当前EK为负数
  96   3                  Temp[0] = PID.KP * PID.Ek[0];    // KP*EK0
  97   3                  Temp[1] = PID.KI * PID.Ek[1];    // KI*EK1
  98   3                  Temp[2] = PID.KD * PID.Ek[2];    // KD*EK2
  99   3              }
 100   2       }
 101   1       
 102   1      /*以下部分代码是讲所有的正数项叠加，负数项叠加*/
 103   1                      if(PID.EkFlag[0]==0)
 104   1                      {
 105   2                              PostSum += Temp[0];   //正数和
 106   2                      }
 107   1                      else
 108   1                      {
 109   2                              NegSum += Temp[0];    //负数和
 110   2                      }                         // KP*EK0
 111   1                      if(PID.EkFlag[1]!=0)     
 112   1                      {
 113   2                              PostSum += Temp[1];   //正数和
 114   2              }
 115   1                      else
 116   1                      {
 117   2                              NegSum += Temp[1];    //负数和
C51 COMPILER V9.01   MAIN                                                                  08/07/2013 18:04:59 PAGE 3   

 118   2                      }                         // - kI * EK1
 119   1                      if(PID.EkFlag[2]==0)
 120   1                      {
 121   2                              PostSum += Temp[2];   //正数和
 122   2                      }
 123   1                      else
 124   1                      {
 125   2                              NegSum += Temp[2];    //负数和
 126   2                      }                         // KD * EK2
 127   1              if(PID.Uk_flag == 0)
 128   1                      PostSum += PID.Uk;
 129   1                      else
 130   1                      NegSum += PID.Uk;        //
 131   1              if( PostSum > NegSum )             // 是否控制量为正数
 132   1              {
 133   2              Temp[0] = PostSum - NegSum;
 134   2                      if(Temp[0] < SPEED_MAX)   //小于限幅值则为计算值输出
 135   2                  {
 136   3                              PID.Uk = (uint)Temp[0];
 137   3      
 138   3                  }
 139   2                      else
 140   2                      {
 141   3                              PID.Uk = SPEED_MAX;    //否则为限幅值输出
 142   3                      }
 143   2                      PID.Uk_flag = 0;
 144   2              }
 145   1              else               //控制量输出为负数，则输出0
 146   1              {
 147   2              Temp[0] =  NegSum -     PostSum ;
 148   2                      if(Temp[0] < SPEED_MAX)   //小于限幅值则为计算值输出
 149   2                  {
 150   3                              PID.Uk = (uint)Temp[0];
 151   3      
 152   3                  }
 153   2                      else
 154   2                      {
 155   3                              PID.Uk = SPEED_MAX;    //否则为限幅值输出
 156   3                      }
 157   2                  PID.Uk_flag = 1;
 158   2              }
 159   1              return   PID.Uk;
 160   1      }
 161          void delay_ms(int m);
 162          void Timer_init()
 163          {
 164   1      //      EX0 = 1;
 165   1              ET0 = 1;
 166   1              ET1 = 1;
 167   1              TR0 = 1;
 168   1              TR1 = 1;
 169   1      //      IE0 = 1;                  //
 170   1      //      IT0 = 1;                        //
 171   1              TMOD = 0X15;
 172   1              AUXR = 0XC0;//设值定时器分频
 173   1              TH0  = 0X01;
 174   1              TL0  = 0X01;
 175   1              TH1  = (65536-55526)/256;
 176   1              TL1  = (65536-55526)%256;
 177   1              EA   = 1;               
 178   1      
 179   1      }
C51 COMPILER V9.01   MAIN                                                                  08/07/2013 18:04:59 PAGE 4   

 180          void PWM_Set(uchar pwm0,uchar pwm1)
 181          {
 182   1              
 183   1      //      CCAP0L = pwm0 ; 
 184   1              CCAP0H = pwm0;                   
 185   1         // CCAP1L = pwm1;   
 186   1              CCAP1H = pwm1;                  
 187   1      }
 188          void set_speed0()
 189          {
 190   1              PIDProcess();
 191   1              if(PID.Uk_flag == 0)
 192   1              {
 193   2              
 194   2                      pwm = pwm + PIDProcess();
 195   2              }
 196   1              if(PID.Uk_flag == 1)
 197   1              {
 198   2                      
 199   2                      pwm = pwm - PIDProcess();
 200   2              }
 201   1              PWM_Set(pwm,pwm);
 202   1      //      if(speed_aver>NUM)
 203   1      //      {
 204   1      //              pwm =pwm-1;
 205   1      //              PWM_Set(pwm,pwm);
 206   1      //      }
 207   1      //      else if(speed_aver<NUM )
 208   1      //      {
 209   1      //              pwm =pwm+1;
 210   1      //              if(pwm >255) pwm = 255;
 211   1      //              PWM_Set(pwm,pwm);
 212   1      //      }
 213   1      }
 214          
 215          void main()
 216          {
 217   1      
 218   1              lcm_init();
 219   1              LCDLogo();
 220   1              PP_init();
 221   1              Timer_init();
 222   1              PID.KP = 70;
 223   1              PID.KI = 7;
 224   1              PID.KD = 4;
 225   1              PID.B  =0;
 226   1              while(1)
 227   1              {
 228   2                      if(flag == 1)
 229   2                      {
 230   3                      
 231   3                              set_speed0();
 232   3                              flag = 0;
 233   3                      }
 234   2                      
 235   2                       write_com(0x8c);
 236   2                       write_data(speed_aver/1000+0x30);              
 237   2                       write_data(speed_aver/100%10+0x30);            
 238   2                       write_data(speed_aver/10%10+0x30);     
 239   2                       write_data(speed_aver%10+0x30);
 240   2                       
 241   2              }
C51 COMPILER V9.01   MAIN                                                                  08/07/2013 18:04:59 PAGE 5   

 242   1      
 243   1      }
 244          
 245          
 246          
 247          void Timer_1()interrupt 3
 248          {
 249   1              TH1 = (65536-55526)/256;
 250   1              TL1 = (65536-55526)%256;
 251   1              count++;
 252   1              if(count > 100)
 253   1              {
 254   2                      count =0;
 255   2              //      sec++;
 256   2                      //if(sec >1)
 257   2              //      { 
 258   2                              flag = 1;
 259   2      
 260   2                              speed = TH0*256+TL0;
 261   2                              TH0 = TL0 =0;   
 262   2                              speed_aver = (speed*60)>>2;
 263   2                              sec =0;
 264   2                              
 265   2                      
 266   2              //      }
 267   2              }       
 268   1      
 269   1      
 270   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    899    ----
   CONSTANT SIZE    =     36    ----
   XDATA SIZE       =     16    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8    ----
   IDATA SIZE       =   ----      10
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
