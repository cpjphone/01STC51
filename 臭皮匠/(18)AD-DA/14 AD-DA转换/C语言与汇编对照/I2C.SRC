; I2C.SRC generated from: I2C.c
; COMPILER INVOKED BY:
;        C:\Keil\C51\BIN\C51.EXE I2C.c BROWSE DEBUG OBJECTEXTEND

$NOMOD51

NAME	I2C

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
T0	BIT	0B0H.4
AC	BIT	0D0H.6
T1	BIT	0B0H.5
T2	BIT	090H.0
EA	BIT	0A8H.7
IE	DATA	0A8H
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
RI	BIT	098H.0
INT0	BIT	0B0H.2
CY	BIT	0D0H.7
TI	BIT	098H.1
INT1	BIT	0B0H.3
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
T2EX	BIT	090H.1
OV	BIT	0D0H.2
RCAP2L	DATA	0CAH
C_T2	BIT	0C8H.1
WR	BIT	0B0H.6
RCLK	BIT	0C8H.5
TCLK	BIT	0C8H.4
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
TMOD	DATA	089H
TCON	DATA	088H
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
CP_RL2	BIT	0C8H.0
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
TB8	BIT	098H.3
EX1	BIT	0A8H.2
IT1	BIT	088H.2
TH2	DATA	0CDH
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
TL2	DATA	0CCH
PT0	BIT	0B8H.1
PT1	BIT	0B8H.3
RS0	BIT	0D0H.3
PT2	BIT	0B8H.5
TR0	BIT	088H.4
RS1	BIT	0D0H.4
TR1	BIT	088H.6
SDA	BIT	0A0H.1
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
DPH	DATA	083H
DPL	DATA	082H
SCL	BIT	0A0H.0
EXEN2	BIT	0C8H.3
REN	BIT	098H.4
T2CON	DATA	0C8H
RXD	BIT	0B0H.0
TXD	BIT	0B0H.1
F0	BIT	0D0H.5
PSW	DATA	0D0H
?PR?Start_I2c?I2C    SEGMENT CODE 
?PR?Stop_I2c?I2C     SEGMENT CODE 
?PR?_SendByte?I2C    SEGMENT CODE 
?PR?RcvByte?I2C      SEGMENT CODE 
?PR?Ack_I2c?I2C      SEGMENT CODE 
?BI?Ack_I2c?I2C      SEGMENT BIT OVERLAYABLE 
?BI?I2C              SEGMENT BIT 
	PUBLIC	ack
	PUBLIC	?Ack_I2c?BIT
	PUBLIC	Ack_I2c
	PUBLIC	RcvByte
	PUBLIC	_SendByte
	PUBLIC	Stop_I2c
	PUBLIC	Start_I2c

	RSEG  ?BI?Ack_I2c?I2C
?Ack_I2c?BIT:
          a?444:   DBIT   1

	RSEG  ?BI?I2C
            ack:   DBIT   1
; 
; /*************************此部分为I2C总线的驱动程序*************************************/

; #include<reg52.h>
; #include <intrins.h>
; #include <I2C.H>
; 
; 
; #define  NOP()   _nop_()   /* 定义空指令 */
; #define  _Nop()  _nop_()   /*定义空指令*/
; 
;  
; sbit     SCL=P2^0;       //I2C  时钟 
; sbit     SDA=P2^1;       //I2C  数据 
; bit ack;                 /*应答标志位*/
;    
; 
; /*******************************************************************
;                      起动总线函数               
; 函数原型: void  Start_I2c();  
; 功能:     启动I2C总线,即发送I2C起始条件.  
; ********************************************************************/
; void Start_I2c()

	RSEG  ?PR?Start_I2c?I2C
Start_I2c:
			; SOURCE LINE # 23
; {
			; SOURCE LINE # 24
;   SDA=1;         /*发送起始条件的数据信号*/
			; SOURCE LINE # 25
	SETB 	SDA
;   _Nop();
			; SOURCE LINE # 26
	NOP  	
;   SCL=1;
			; SOURCE LINE # 27
	SETB 	SCL
;   _Nop();        /*起始条件建立时间大于4.7us,延时*/
			; SOURCE LINE # 28
	NOP  	
;   _Nop();
			; SOURCE LINE # 29
	NOP  	
;   _Nop();
			; SOURCE LINE # 30
	NOP  	
;   _Nop();
			; SOURCE LINE # 31
	NOP  	
;   _Nop();    
			; SOURCE LINE # 32
	NOP  	
;   SDA=0;         /*发送起始信号*/
			; SOURCE LINE # 33
	CLR  	SDA
;   _Nop();        /* 起始条件锁定时间大于4μs*/
			; SOURCE LINE # 34
	NOP  	
;   _Nop();
			; SOURCE LINE # 35
	NOP  	
;   _Nop();
			; SOURCE LINE # 36
	NOP  	
;   _Nop();
			; SOURCE LINE # 37
	NOP  	
;   _Nop();       
			; SOURCE LINE # 38
	NOP  	
;   SCL=0;       /*钳住I2C总线，准备发送或接收数据 */
			; SOURCE LINE # 39
	CLR  	SCL
;   _Nop();
			; SOURCE LINE # 40
	NOP  	
;   _Nop();
			; SOURCE LINE # 41
	NOP  	
; }
			; SOURCE LINE # 42
	RET  	
; END OF Start_I2c

; 
; /*******************************************************************
;                       结束总线函数               
; 函数原型: void  Stop_I2c();  
; 功能:     结束I2C总线,即发送I2C结束条件.  
; ********************************************************************/
; void Stop_I2c()

	RSEG  ?PR?Stop_I2c?I2C
Stop_I2c:
			; SOURCE LINE # 49
; {
			; SOURCE LINE # 50
;   SDA=0;      /*发送结束条件的数据信号*/
			; SOURCE LINE # 51
	CLR  	SDA
;   _Nop();       /*发送结束条件的时钟信号*/
			; SOURCE LINE # 52
	NOP  	
;   SCL=1;      /*结束条件建立时间大于4μs*/
			; SOURCE LINE # 53
	SETB 	SCL
;   _Nop();
			; SOURCE LINE # 54
	NOP  	
;   _Nop();
			; SOURCE LINE # 55
	NOP  	
;   _Nop();
			; SOURCE LINE # 56
	NOP  	
;   _Nop();
			; SOURCE LINE # 57
	NOP  	
;   _Nop();
			; SOURCE LINE # 58
	NOP  	
;   SDA=1;      /*发送I2C总线结束信号*/
			; SOURCE LINE # 59
	SETB 	SDA
;   _Nop();
			; SOURCE LINE # 60
	NOP  	
;   _Nop();
			; SOURCE LINE # 61
	NOP  	
;   _Nop();
			; SOURCE LINE # 62
	NOP  	
;   _Nop();
			; SOURCE LINE # 63
	NOP  	
; }
			; SOURCE LINE # 64
	RET  	
; END OF Stop_I2c

; 
; /*******************************************************************
;                  字节数据发送函数               
; 函数原型: void  SendByte(UCHAR c);
; 功能:     将数据c发送出去,可以是地址,也可以是数据,发完后等待应答,并对
;           此状态位进行操作.(不应答或非应答都使ack=0)     
;            发送数据正常，ack=1; ack=0表示被控器无应答或损坏。
; ********************************************************************/
; void  SendByte(unsigned char  c)

	RSEG  ?PR?_SendByte?I2C
_SendByte:
	USING	0
			; SOURCE LINE # 73
;---- Variable 'c?240' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 74
;  unsigned char  BitCnt;
;  
;  for(BitCnt=0;BitCnt<8;BitCnt++)  /*要传送的数据长度为8位*/
			; SOURCE LINE # 77
;---- Variable 'BitCnt?241' assigned to Register 'R6' ----
	CLR  	A
	MOV  	R6,A
?C0003:
;     {
			; SOURCE LINE # 78
;      if((c<<BitCnt)&0x80)SDA=1;   /*判断发送位*/
			; SOURCE LINE # 79
	MOV  	A,R7
	MOV  	R0,AR6
	INC  	R0
	SJMP 	?C0020
?C0019:
	CLR  	C
	RLC  	A
?C0020:
	DJNZ 	R0,?C0019
	JNB  	ACC.7,?C0006
	SETB 	SDA
	SJMP 	?C0007
?C0006:
;        else  SDA=0;                
			; SOURCE LINE # 80
	CLR  	SDA
?C0007:
;      _Nop();
			; SOURCE LINE # 81
	NOP  	
;      SCL=1;               /*置时钟线为高，通知被控器开始接收数据位*/
			; SOURCE LINE # 82
	SETB 	SCL
;       _Nop(); 
			; SOURCE LINE # 83
	NOP  	
;       _Nop();             /*保证时钟高电平周期大于4μs*/
			; SOURCE LINE # 84
	NOP  	
;       _Nop();
			; SOURCE LINE # 85
	NOP  	
;       _Nop();
			; SOURCE LINE # 86
	NOP  	
;       _Nop();         
			; SOURCE LINE # 87
	NOP  	
;      SCL=0; 
			; SOURCE LINE # 88
	CLR  	SCL
;     }
			; SOURCE LINE # 89
	INC  	R6
	CJNE 	R6,#08H,?C0003
?C0004:
;     
;     _Nop();
			; SOURCE LINE # 91
	NOP  	
;     _Nop();
			; SOURCE LINE # 92
	NOP  	
;     SDA=1;                /*8位发送完后释放数据线，准备接收应答位*/
			; SOURCE LINE # 93
	SETB 	SDA
;     _Nop();
			; SOURCE LINE # 94
	NOP  	
;     _Nop();   
			; SOURCE LINE # 95
	NOP  	
;     SCL=1;
			; SOURCE LINE # 96
	SETB 	SCL
;     _Nop();
			; SOURCE LINE # 97
	NOP  	
;     _Nop();
			; SOURCE LINE # 98
	NOP  	
;     _Nop();
			; SOURCE LINE # 99
	NOP  	
;     if(SDA==1)ack=0;     
			; SOURCE LINE # 100
	JNB  	SDA,?C0008
	CLR  	ack
	SJMP 	?C0009
?C0008:
;        else ack=1;        /*判断是否接收到应答信号*/
			; SOURCE LINE # 101
	SETB 	ack
?C0009:
;     SCL=0;
			; SOURCE LINE # 102
	CLR  	SCL
;     _Nop();
			; SOURCE LINE # 103
	NOP  	
;     _Nop();
			; SOURCE LINE # 104
	NOP  	
; }
			; SOURCE LINE # 105
	RET  	
; END OF _SendByte

; 
; /*******************************************************************
;                  字节数据接收函数               
; 函数原型: UCHAR  RcvByte();
; 功能:        用来接收从器件传来的数据,并判断总线错误(不发应答信号)，
;           发完后请用应答函数应答从机。  
; ********************************************************************/    
; unsigned char   RcvByte()

	RSEG  ?PR?RcvByte?I2C
RcvByte:
	USING	0
			; SOURCE LINE # 113
; {
			; SOURCE LINE # 114
;   unsigned char  retc;
;   unsigned char  BitCnt;
;   
;   retc=0; 
			; SOURCE LINE # 118
;---- Variable 'retc?342' assigned to Register 'R7' ----
	CLR  	A
	MOV  	R7,A
;   SDA=1;                     /*置数据线为输入方式*/
			; SOURCE LINE # 119
	SETB 	SDA
;   for(BitCnt=0;BitCnt<8;BitCnt++)
			; SOURCE LINE # 120
;---- Variable 'BitCnt?343' assigned to Register 'R6' ----
	MOV  	R6,A
?C0011:
;       {
			; SOURCE LINE # 121
;         _Nop();           
			; SOURCE LINE # 122
	NOP  	
;         SCL=0;                  /*置时钟线为低，准备接收数据位*/
			; SOURCE LINE # 123
	CLR  	SCL
;         _Nop();
			; SOURCE LINE # 124
	NOP  	
;         _Nop();                 /*时钟低电平周期大于4.7μs*/
			; SOURCE LINE # 125
	NOP  	
;         _Nop();
			; SOURCE LINE # 126
	NOP  	
;         _Nop();
			; SOURCE LINE # 127
	NOP  	
;         _Nop();
			; SOURCE LINE # 128
	NOP  	
;         SCL=1;                  /*置时钟线为高使数据线上数据有效*/
			; SOURCE LINE # 129
	SETB 	SCL
;         _Nop();
			; SOURCE LINE # 130
	NOP  	
;         _Nop();
			; SOURCE LINE # 131
	NOP  	
;         retc=retc<<1;
			; SOURCE LINE # 132
	MOV  	A,R7
	ADD  	A,ACC
	MOV  	R7,A
;         if(SDA==1)retc=retc+1;  /*读数据位,接收的数据位放入retc中 */
			; SOURCE LINE # 133
	JNB  	SDA,?C0014
	INC  	R7
?C0014:
;         _Nop();
			; SOURCE LINE # 134
	NOP  	
;         _Nop(); 
			; SOURCE LINE # 135
	NOP  	
;       }
			; SOURCE LINE # 136
	INC  	R6
	CJNE 	R6,#08H,?C0011
?C0012:
;   SCL=0;    
			; SOURCE LINE # 137
	CLR  	SCL
;   _Nop();
			; SOURCE LINE # 138
	NOP  	
;   _Nop();
			; SOURCE LINE # 139
	NOP  	
;   return(retc);
			; SOURCE LINE # 140
; }
			; SOURCE LINE # 141
?C0015:
	RET  	
; END OF RcvByte

; 
; /********************************************************************
;                      应答子函数
; 函数原型:  void Ack_I2c(bit a);
; 功能:      主控器进行应答信号(可以是应答或非应答信号，由位参数a决定)
; ********************************************************************/
; void Ack_I2c(bit a)

	RSEG  ?PR?Ack_I2c?I2C
Ack_I2c:
			; SOURCE LINE # 148
; {
			; SOURCE LINE # 149
;   
;   if(a==0)SDA=0;              /*在此发出应答或非应答信号 */
			; SOURCE LINE # 151
	JB   	a?444,?C0016
	CLR  	SDA
	SJMP 	?C0017
?C0016:
;   else SDA=1;
			; SOURCE LINE # 152
	SETB 	SDA
?C0017:
;   _Nop();
			; SOURCE LINE # 153
	NOP  	
;   _Nop();
			; SOURCE LINE # 154
	NOP  	
;   _Nop();      
			; SOURCE LINE # 155
	NOP  	
;   SCL=1;
			; SOURCE LINE # 156
	SETB 	SCL
;   _Nop();
			; SOURCE LINE # 157
	NOP  	
;   _Nop();                    /*时钟低电平周期大于4μs*/
			; SOURCE LINE # 158
	NOP  	
;   _Nop();
			; SOURCE LINE # 159
	NOP  	
;   _Nop();
			; SOURCE LINE # 160
	NOP  	
;   _Nop();  
			; SOURCE LINE # 161
	NOP  	
;   SCL=0;                     /*清时钟线，钳住I2C总线以便继续接收*/
			; SOURCE LINE # 162
	CLR  	SCL
;   _Nop();
			; SOURCE LINE # 163
	NOP  	
;   _Nop();    
			; SOURCE LINE # 164
	NOP  	
; }
			; SOURCE LINE # 165
	RET  	
; END OF Ack_I2c

	END
